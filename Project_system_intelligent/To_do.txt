
/**** Datasets: **** /
Principal:
=> https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits
Secundario:
=> http://archive.ics.uci.edu/ml/datasets/Semeion+Handwritten+Digit




=> 	Implementar algortimo LCS
	Parametros de configuración: 
		N: numero de reglas en el sistema
		p: Parametro de aprendizaje 0<p<=1
		m: longitud del cromosoma
		k: bits para representar la fitness 10 bits
	
	Inicializacion: (M)
	=> random genera reglas de longitud n  (regla = condicion,accion,fitness)  caracteres (0,1,#)
	=> las reglas se deben guardar en una matriz
	Paso 1 (M)
	=> Convierta los datos de entrada en un cromosoma 
	=> omo representar #(comodin)? 
		-> 1. Vector auxiliar con las posiciones de los comodines
		-> 2. Usar dos bits para representar cada caracter del cromosoma
	Paso 2 (J)
	=> Comparar el mensaje de entrada con cada una de las reglas.
		-> Usando operadores logicos
		-> Salida: Lista de reglas que se activaron, (que coincidieron con el mensaje)
	Paso 3.(J)
	=> Funcion de encontrar la regla con fitness mas alto (Si se implementa el sistema de ofertas, se debe hacer una lista con el valor ofertado por cada regla usando la formula)
	=> Funcion random de seleccionar una regla al azar
	=> Salida: Las reglas que tengan la misma accion seleccionada (Ids de las reglas dentro de la matriz, accion de la regla)
	Paso 4.(J)
	=> Funcion que reciba el valor recompensa (valor  representado en k bits)
	   -> (recompensa/suma total de fitness de las reglas que se activaron) * fitness regla       Se debe redondear a entero
	   -> incrementar el fitness de cada regla
	 Paso 5.(M)
	 => Funcion de seleccion de una o dos regla por mecanismo de ruleta
	 => Funcion Mutación
	 => Funcion recombinación
	  -> salida: una regla nueva y se debe agregar a la lista de reglas
	  Si la lista de reglas excede el valor de N hay que eliminar la regla con el fitness mas bajo.
	
	
	
	